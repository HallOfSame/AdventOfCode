@using Helpers.Drawing
@* Empty div to force the font to load before we draw *@
<div style="font-family: square;"></div>
<div>
    <canvas id="canvasToDraw" style="border: 1px solid black;"></canvas>

    <p>Mouse Coordinates: X = @mouseX, Y = @mouseY</p>
</div>

@inject IJSRuntime JsRuntime

@code {

    [Parameter]
    public DrawableCoordinate[] CoordinatesToDraw { get; set; } = [];

    private DrawableCoordinate[] prevDrawableCoordinates = [];

    private double mouseX;
    private double mouseY;

    private DotNetObjectReference<BlazorCanvas>? objRef;
    private bool waitingToDraw;
    private int pixelSize = 25;

    protected override async Task OnParametersSetAsync()
    {
        // TODO pixel size probably needs to scale based on input
        if (CoordinatesToDraw != prevDrawableCoordinates && CoordinatesToDraw.Length > 0)
        {
            if (objRef != null)
            {
                await Draw();
            }
            else
            {
                waitingToDraw = true;
            }
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("AocCanvas.enableCoordinateDisplay", "canvasToDraw", objRef);

            if (waitingToDraw)
            {
                await Draw();
            }
        }
    }

    private async Task Draw()
    {
        var image = new ImageData
            {
                PixelSize = pixelSize,
                Pixels = CoordinatesToDraw
            };

        await JsRuntime.InvokeVoidAsync("AocCanvas.draw", "canvasToDraw", image);
    }

    [JSInvokable]
    public void OnCanvasMouseMove(double x, double y)
    {
        if (CoordinatesToDraw.Length == 0)
        {
            return;
        }

        var height = (int)CoordinatesToDraw.Max(c => c.Y);
        x = Math.Floor(x / pixelSize);
        y = Math.Floor(y / pixelSize);
        y = -y + height;

        // ReSharper disable CompareOfFloatsByEqualityOperator
        if (x == mouseX && y == mouseY)
        {
            return;
        }
        // ReSharper restore CompareOfFloatsByEqualityOperator

        mouseX = x;
        mouseY = y;

        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

}