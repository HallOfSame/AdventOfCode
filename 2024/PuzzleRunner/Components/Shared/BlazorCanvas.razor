@using Helpers.FileReaders

<h3>Canvas Mouse Move Example</h3>

<canvas id="canvasToDraw" width="400" height="400" style="border: 1px solid black;"></canvas>

<p>Mouse Coordinates: X = @mouseX, Y = @mouseY</p>

@inject IJSRuntime JsRuntime
@code {
    private double mouseX;
    private double mouseY;

    private DotNetObjectReference<BlazorCanvas>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var input = @".|...\....
|.-.\.....
.....|-...
........|.
..........
.........\
..../.\\..
.-.-/..|..
.|....-|.\
..//.|....";

            var coordinateMap = (await new GridFileReader().ReadFromString(input)).ToDictionary(x => x.Coordinate, x => x.Value);

            // TODO this should use drawable coordinates
            objRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("AocCanvas.enableCoordinateDisplay", "canvasToDraw", objRef);

            var pixels = coordinateMap.Select(x => new Pixel
            {
                Text = x.Value.ToString(),
                X = (int)x.Key.X,
                Y = (int)x.Key.Y,
                Color = x.Value == '/' ? "blue" : null
            });

            pixels.Where(x => x.Color == "blue")
                .ToList()
                .ForEach(x =>
                {
                    Console.WriteLine($"{x.X}, {x.Y}");
                });

            var test = new ImageData
            {
                PixelSize = 25,
                Pixels = pixels.ToArray()
            };

            // test.Pixels[0] = new Pixel
            // {
            //     Color = "green",
            //     X = 0,
            //     Y = 0
            // };

            // test.Pixels[1] = new Pixel
            // {
            //     Color = "blue",
            //     X = 1,
            //     Y = 0
            // };

            // test.Pixels[2] = new Pixel
            // {
            //     Color = "red",
            //     X = 2,
            //     Y = 0
            // };

            // test.Pixels[3] = new Pixel
            // {
            //     Color = "yellow",
            //     X = 3,
            //     Y = 0
            // };

            // test.Pixels[4] = new Pixel
            // {
            //     Text = "Z",
            //     X = 2,
            //     Y = 1
            // };

            await JsRuntime.InvokeVoidAsync("AocCanvas.draw", "canvasToDraw", test);
        }
    }

    [JSInvokable]
    public void OnCanvasMouseMove(double x, double y)
    {
        var height = 9;
        var pixelSize = 25;
        x = Math.Floor(x / 25);
        y = Math.Floor(y / 25);
        y = -y + height;
        mouseX = x;
        mouseY = y;
        // TODO re-render only if number changed
        StateHasChanged(); 
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}