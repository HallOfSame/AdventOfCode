@page "/puzzle/{Year:int}/{Day:int}"
@using Helpers.Interfaces
@using InputStorageDatabase
@using InputStorageDatabase.Extensions
@using PuzzleRunner.Components.Shared
<MudPaper Class="pa-16 ma-2">
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h5">@puzzle.Info.Name</MudText>
            <MudText Typo="Typo.body2">@puzzle.Info.Year Day @puzzle.Info.Day</MudText>
            <MudLink Typo="Typo.body2" Target="_blank" Href="@($"https://adventofcode.com/{puzzle.Info.Year}/day/{puzzle.Info.Day}")">AoC Link</MudLink>
            <MudSelect @bind-Value="puzzleInput">
                @foreach (var input in availableInputs)
                {
                    <MudSelectItem @key="input.InputId" Value="input">
                        @input.Name (@input.InputType)
                    </MudSelectItem>
                }
            </MudSelect>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="LoadSelectedInput" Disabled="puzzleInput == null" Variant="Variant.Text" Color="Color.Primary">Initialize</MudButton>
            <MudButton OnClick="OpenInputUploader" Variant="Variant.Text" Color="Color.Primary">Create Input</MudButton>
        </MudCardActions>
    </MudCard>
    @if (readyToExecute)
    {
        <PuzzleExecution Puzzle="puzzle" />
    }
</MudPaper>

@inject IPuzzleContainer PuzzleContainer
@inject IDialogService DialogService
@inject AdventOfCodeContext AdventOfCodeContext
@code {

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Day { get; set; }

    private IPuzzle puzzle = null!;
    private List<PuzzleInput> availableInputs = [];
    private PuzzleInput? puzzleInput;
    private bool readyToExecute;

    protected override void OnInitialized()
    {
        puzzle = PuzzleContainer.GetPuzzle(Year, Day);
        availableInputs = AdventOfCodeContext.GetInputsForDay(Year, Day)
            .ToList();
        base.OnInitialized();
    }

    private async Task OpenInputUploader()
    {
        var parameters = new DialogParameters<InputUploader>
        {
            { x => x.Year, puzzle.Info.Year },
            { x => x.Day, puzzle.Info.Day },
        };
        var options = new DialogOptions { CloseOnEscapeKey = false };

        var dialog = await DialogService.ShowAsync<InputUploader>("Upload Input", parameters, options);

        var result = await dialog.Result;

        if (result?.Data is int newInputId)
        {
            availableInputs.Add(AdventOfCodeContext.PuzzleInputs.Single(x => x.InputId == newInputId));
        }
    }

    private async Task LoadSelectedInput()
    {
        await puzzle.LoadInput(puzzleInput!.Input);

        readyToExecute = true;
    }
}
